{"ast":null,"code":"var _jsxFileName = \"/home/jacka/Projects/draftroom/src/components/DraftRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:3000\"); // Change this URL to match server\n\nfunction DraftRoom() {\n  _s();\n  const [drafts, setDrafts] = useState([]); // To store draft items\n  const [input, setInput] = useState(\"\"); // For user input\n\n  useEffect(() => {\n    // Listen for 'draft update' events from the server\n    socket.on(\"draft update\", draft => {\n      setDrafts(drafts => [...drafts, draft]);\n    });\n    return () => {\n      socket.off(\"draft update\");\n    };\n  }, []);\n  const handleSendDraft = () => {\n    // Emit a 'new draft' event to the server with the input data\n    socket.emit(\"new draft\", input);\n    setInput(\"\"); // Clear input after sending\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Draft Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Enter your draft item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendDraft,\n      children: \"Send Draft\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: drafts.map((draft, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: draft\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(DraftRoom, \"KGehlSN5Z/YXhBl2XYZrbekHP4M=\");\n_c = DraftRoom;\nexport default DraftRoom;\nvar _c;\n$RefreshReg$(_c, \"DraftRoom\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","DraftRoom","_s","drafts","setDrafts","input","setInput","on","draft","off","handleSendDraft","emit","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","map","index","_c","$RefreshReg$"],"sources":["/home/jacka/Projects/draftroom/src/components/DraftRoom.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"http://localhost:3000\"); // Change this URL to match server\n\nfunction DraftRoom() {\n  const [drafts, setDrafts] = useState([]); // To store draft items\n  const [input, setInput] = useState(\"\"); // For user input\n\n  useEffect(() => {\n    // Listen for 'draft update' events from the server\n    socket.on(\"draft update\", (draft) => {\n      setDrafts((drafts) => [...drafts, draft]);\n    });\n\n    return () => {\n      socket.off(\"draft update\");\n    };\n  }, []);\n\n  const handleSendDraft = () => {\n    // Emit a 'new draft' event to the server with the input data\n    socket.emit(\"new draft\", input);\n    setInput(\"\"); // Clear input after sending\n  };\n\n  return (\n    <div>\n      <h1>Draft Room</h1>\n      <input\n        type=\"text\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        placeholder=\"Enter your draft item\"\n      />\n      <button onClick={handleSendDraft}>Send Draft</button>\n      <ul>\n        {drafts.map((draft, index) => (\n          <li key={index}>{draft}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default DraftRoom;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,MAAM,GAAGH,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAE5C,SAASI,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExCC,SAAS,CAAC,MAAM;IACd;IACAI,MAAM,CAACO,EAAE,CAAC,cAAc,EAAGC,KAAK,IAAK;MACnCJ,SAAS,CAAED,MAAM,IAAK,CAAC,GAAGA,MAAM,EAAEK,KAAK,CAAC,CAAC;IAC3C,CAAC,CAAC;IAEF,OAAO,MAAM;MACXR,MAAM,CAACS,GAAG,CAAC,cAAc,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACAV,MAAM,CAACW,IAAI,CAAC,WAAW,EAAEN,KAAK,CAAC;IAC/BC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChB,CAAC;EAED,oBACEP,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBjB,OAAA;MACEkB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEb,KAAM;MACbc,QAAQ,EAAGC,CAAC,IAAKd,QAAQ,CAACc,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC1CI,WAAW,EAAC;IAAuB;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,eACFjB,OAAA;MAAQwB,OAAO,EAAEb,eAAgB;MAAAE,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrDjB,OAAA;MAAAa,QAAA,EACGT,MAAM,CAACqB,GAAG,CAAC,CAAChB,KAAK,EAAEiB,KAAK,kBACvB1B,OAAA;QAAAa,QAAA,EAAiBJ;MAAK,GAAbiB,KAAK;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAC5B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACd,EAAA,CAtCQD,SAAS;AAAAyB,EAAA,GAATzB,SAAS;AAwClB,eAAeA,SAAS;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}